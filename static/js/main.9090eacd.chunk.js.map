{"version":3,"sources":["Components/Bird.js","Components/Pipe.js","Components/Controls.js","Components/Score.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Bird","_ref","top","style","concat","react_default","a","createElement","className","Pipe","x","height","type","y","Object","assign","left","cName","Controls","Score","score","generatePipePairs","botH","min","arguments","length","undefined","max","Math","floor","random","generateBotHeight","ease","generateRandomEase","initialState","gameRunning","minTop","maxBot","velocity","deltaTop","jumpDistance","timerId","pipes","scorePipe","App","state","fall","_this$state","_this","deltaPos","newPos","newDeltaPos","jump","_this$state2","setState","updatePipes","cleaned","filter","p","missing","baseDistance","copy","toConsumableArray","i","o","id","push","map","updateGame","winningPipe","_this$state3","newScore","newFallPosition","newPipes","checkGame","_this$state4","collisionPipe","pipe","topLimit","botLimit","stopGame","startGame","t","setInterval","pause","console","error","clearInterval","gameState","resetGame","handlePress","e","kc","keyCode","window","addEventListener","this","removeEventListener","_this$state5","Components_Score","Components_Controls","Components_Bird","react","key","Components_Pipe","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9090eacd.chunk.js","sourcesContent":["import React from \"react\";\nimport '../App.css';\n\nconst Bird = ({top}) => {\n  const style = {top: `${top}px`};\n\n  return (\n    <div className=\"Bird\" style={style}></div>\n  )\n}\n\nexport default Bird;\n","import React from \"react\";\nimport '../App.css';\n\nconst Pipe = ({x, height, type}) => {\n  const y = type === 'bot' ? {height: height[0]}: {height: height[1]};\n  const style = Object.assign({left: `${x}px`}, y);\n  const cName = type === 'bot' ? \"Pipe bottom\" : \"Pipe top\";\n  return <div className={cName} style={style} />\n}\n\nexport default Pipe;\n","import React from \"react\";\nimport '../App.css';\n\nconst Controls = () => (\n    <div className=\"Controls\">\n      <p><span className=\"Key\">P</span> Pause / Resume</p>\n      <p><span className=\"Key\">SPACE</span> Jump</p>\n      <p><span className=\"Key\">R</span> Reset Game</p>\n      <p><span className=\"Key\">S</span> Start Game</p>\n    </div>\n);\n\nexport default Controls;\n","import React from \"react\";\nimport '../App.css';\n\nconst Score = ({ score }) => (\n  <div className=\"Score\">Score: {score}</div>\n);\n\nexport default Score;\n","export const generateRandomEase = (min=80, max = 100) => (Math.floor(Math.random() * (max - min + 1)) + min);\n\nexport const generateBotHeight = (min=240, max=480) => (Math.floor(Math.random() * (max - min + 1)) + min);\n\n\nexport const generatePipePairs = () => {\n  const botH = generateBotHeight();\n  const ease = generateRandomEase();\n\n\n  const topH = (720 - 50 - ease - botH);\n  return [botH, topH, ease];\n}\n\n\nexport const initialState = {\n  gameRunning: false,\n  minTop: 0,\n  maxBot: 670,\n  top: 60,\n  velocity: 16,\n  deltaTop: 0,\n  jumpDistance: -5,\n  timerId : undefined,\n  pipes: [],\n  scorePipe: false,\n  score: 0,\n};\n\nexport const recordAnimationFrames = (callback) => {\n  let fps = 60,\n  interval = 1000/fps,\n  lastTime = new Date().getTime(),\n  currentTime = 0,\n  delta = 0,\n    running = true,\n    raf;\n  const stop = () => {\n    running = false;\n    cancelAnimationFrame(raf);\n  };\n  const start = () => {\n    running = true;\n    run();\n  };\n  const run = () => {\n    raf = requestAnimationFrame(() => {\n      currentTime = new Date().getTime();\n      delta = (currentTime - lastTime)\n      if(delta > interval) {\n        callback();\n      }\n      lastTime = currentTime - (delta % interval);\n      if (running) run();\n    });\n  };\n  start();\n  return { start, stop };\n};\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport Bird from \"./Components/Bird\";\nimport Pipe from \"./Components/Pipe\";\nimport Controls from \"./Components/Controls\";\nimport Score from \"./Components/Score\";\nimport { generatePipePairs, initialState } from \"./helpers\";\n\nclass App extends Component {\n  state = {\n    gameRunning: false,\n    minTop: 0,\n    maxBot: 670,\n    top: 60,\n    velocity: 16,\n    deltaTop: 0,\n    jumpDistance: -5,\n    timerId : undefined,\n    pipes: [],\n    scorePipe: false,\n    score: 0,\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handlePress)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handlePress)\n  }\n\n  fall = () => {\n    const {top, velocity, maxBot, deltaTop} = this.state;\n    // update\n    let deltaPos = deltaTop + (velocity * 0.016);\n    const newPos = top + deltaPos;\n    // const newPos = top + velocity\n\n    //return new pos\n    return { newPos: newPos <= maxBot ? newPos : maxBot, newDeltaPos: deltaPos};\n  }\n\n  jump = () => {\n    const {top, jumpDistance, minTop} = this.state;\n    const deltaPos = jumpDistance;\n    const newPos = top + deltaPos;\n\n    // this.setState({top: newPos >= minTop ? newPos : minTop})\n    this.setState({top: newPos >= minTop ? newPos : minTop, deltaTop: deltaPos});\n  }\n\n  updatePipes = () => {\n    const { pipes } = this.state;\n    // first remove out of bound pipes\n    const cleaned = pipes.filter(p => p.x >= -50);\n    const missing = (4 - cleaned.length);\n    let baseDistance = 1280;\n    const copy = [...cleaned];\n    for(let i = 0; i < missing; i++) {\n      baseDistance += 451;\n      const o = {\n        x: baseDistance,\n        id: Math.random(),\n        height: generatePipePairs(),\n      }\n      copy.push(o)\n    };\n    // each block should take 2s\n    const movePipes = copy.map((p) => Object.assign(p, {x: p.x - 12.66}));\n    return movePipes;\n  }\n\n  updateGame = (winningPipe) => {\n    const { scorePipe, score } = this.state;\n    const newScore = scorePipe && scorePipe !== winningPipe ? score + 1 : score;\n\n    const newFallPosition = this.fall();\n    const newPipes = this.updatePipes();\n\n    this.setState({\n      top: newFallPosition.newPos,\n      pipes: newPipes,\n      deltaTop: newFallPosition.newDeltaPos,\n      scorePipe: winningPipe,\n      score: newScore,\n    });\n\n  }\n\n  checkGame = () => {\n    const {top, pipes} = this.state;\n    // check for collision\n    // get pipe that is in possible range for collision,\n    // an x value that goes from 20 to 120\n    const collisionPipe = pipes.filter(p => p.x >= 20 && p.x <= 120);\n    if(collisionPipe.length) {\n      const pipe = collisionPipe[0];\n      const topLimit = pipe.height[1]\n      // give 5 pixel of grace\n      // game height - 50px of fixed gap + 5 px of grace = 675\n      // minus bot pipe height gives the bot limit\n      const botLimit = (670 - pipe.height[0] );\n\n      if(top <= topLimit - 5 || top >= botLimit + 5) {\n        return this.stopGame();\n      }\n    }\n\n    // get possible pipe we could have passed -> x > 0 && < 20\n    const winningPipe = pipes.filter(p => p.x >= 0 && p.x <= 20);\n    if(winningPipe.length) {\n      return this.updateGame(winningPipe[0].id);\n    }\n\n    this.updateGame(false);\n  }\n\n  startGame = () => {\n      const t = setInterval(() => this.checkGame(), 16.66 );\n      this.setState({ timerId: t, gameRunning: true })\n  }\n\n  stopGame = (pause) => {\n    const {timerId} = this.state;\n    if(!timerId) { return console.error('no timer set')}\n\n    clearInterval(timerId);\n    const gameState = pause ? 'pause' : false;\n    this.setState({ gameRunning: gameState });\n  }\n\n  resetGame = () => {\n    const { gameState } = this.state;\n    if(gameState === 'pause') {\n      return this.startGame();\n    }\n\n    this.setState(initialState);\n  }\n\n  handlePress = e => {\n    const { gameRunning } = this.state;\n    const kc = e.keyCode;\n\n    // space -> Jump\n    if(kc === 32) {\n      if(gameRunning) {\n        this.jump();\n      }\n    }\n\n    // S -> Start\n    if(kc === 83) {\n      if(!gameRunning) {\n        this.startGame();\n      }\n    }\n\n    // P -> Pause / Unpause\n    if(kc === 80) {\n      if(gameRunning === 'pause') {\n        return this.startGame();\n      }\n      if(gameRunning) {\n        this.stopGame(true);\n      }\n    }\n\n    // R -> Reset\n    if(kc === 82) {\n      if(!gameRunning) {\n        this.resetGame();\n      }\n    }\n  }\n\n  render() {\n    const {top, pipes, score } = this.state;\n    return (\n      <div className=\"App\">\n        <Score score={score} />\n        <Controls />\n        <Bird top={top}/>\n        {\n          pipes.map((p) => <Fragment key={p.id}>\n            <Pipe {...p} type=\"top\"/>\n            <Pipe {...p} type=\"bot\"/>\n            </Fragment>)\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}